_target_: src.models.MatchingModule

net:
  _target_: src.models.components.nets.new_matcher.NewMatcherNet
  type: "two_stage"
  backbone:
    _target_: src.models.components.nets.new_matcher.backbones.create_resnet_selfcoc_fpn
  positional_encoding:
    _target_: src.models.components.nets.new_matcher.SinePositionalEncoding
    depth: 256
  coarse_module:
    _target_: src.models.components.nets.new_matcher.GlobalCoC
    scale: 2
    in_depth: 256
    hidden_depth: 256
    heads_count: 8
    types: ["cross", "cross", "cross", "cross"]
    use_matchability: true
  coarse_matching:
    _target_: src.models.components.nets.new_matcher.CoarseMatching
    use_matchability: ${model.net.coarse_module.use_matchability}
  fine_cls_matching:
    _target_: src.models.components.nets.new_matcher.FineMatching
    type: "classification"
    depth: 64
    window_size: 16
    temperature: 1.0
  fine_reg_matching:
    _target_: src.models.components.nets.new_matcher.FineMatching
    type: "regression_by_expectation"
    depth: 64
    window_size: 3
    reg_by_exp_with_std: true
    temperature: 10.0
  use_extra: true

loss:
  _target_: src.models.components.losses.NewMatcherLoss
  type: "${model.net.type}"
  coarse_cls_sparse: ???
  coarse_cls_loss_pos_weight: 1.0
  coarse_cls_loss_neg_weight: 1.0
  fine_cls_sparse: ???
  fine_cls_loss_pos_weight: 1.0
  fine_cls_loss_neg_weight: 1.0
  fine_reg_loss_weight: 1.0
  use_extra: ${model.net.use_extra}
  use_flow: false
  flow_loss_weight: 0.05

optimizer: ???

scheduler: ???

train_batch_size_per_gpu: ${data.train_batch_size_per_gpu}

canonical_batch_size: ???

canonical_learning_rate: ???

canonical_warmup_step_count: ???

warmup_ratio: ???

end_point_thresholds: ???

epipolar_thresholds: ???

pose_thresholds: ???
