_target_: src.models.MatchingModule

net:
  _target_: src.models.components.nets.hybrid_matcher.HybridMatcherNet
  backbone:
    _target_: src.models.components.nets.hybrid_matcher.backbone.RepVgg82
    block_counts: [2, 4, 14]
    layer_depths: [128, 196, 256]
  positional_encoding:
    _target_: src.models.components.nets.hybrid_matcher.SinePositionalEncoding
    depth: ${model.net.backbone.layer_depths.2}
  local_coc:
    _target_: src.models.components.nets.hybrid_matcher.LocalCoC
    blocks_counts: [2, 2, 2]
    layer_depths: [256, 256, 256]
    hidden_depths: [256, 256, 256]
    heads_counts: [8, 8, 8]
    center_sizes: [8, 4, 2]
    fold_sizes: [1, 1, 1]
  coarse_module:
    _target_: src.models.components.nets.hybrid_matcher.GlobalCoC
    in_depth: ${model.net.local_coc.layer_depths.0}
    hidden_depth: 256
    heads_count: 8
    types: ["cross", "cross", "cross", "cross"]
    use_flow: true
    flow_depth: 128
  coarse_matching:
    _target_: src.models.components.nets.hybrid_matcher.CoarseMatching
    type: ???
    sparse: ???
    use_flow: ${model.net.coarse_module.use_flow}
    flow_decoder:
      _target_: src.models.components.nets.hybrid_matcher.FlowDecoder
      depth: 128
      radius: 8
  fine_preprocess:
    _target_: src.models.components.nets.hybrid_matcher.FinePreprocess
    type: "fuse_all_before_crop"
    window_size: 4
    stride: 4
    padding: 0
    right_extra: 1
#    window_size: 5
#    stride: 4
#    padding: 2
    layer_depths: ${model.net.backbone.layer_depths}
  fine_module:
    _target_: src.models.components.nets.hybrid_matcher.LoFTR
    depth: ${model.net.backbone.layer_depths.0}
    heads_count: 8
    attention:
      _target_: src.models.components.nets.hybrid_matcher.FullAttention
    types: ["self", "cross"]
  fine_matching:
    _target_: src.models.components.nets.hybrid_matcher.FineMatching
#    type: "reg_only_with_std"
#    reg_window_size: ${model.net.fine_preprocess.window_size}
    type: "cls_and_reg"
    cls_window_size: ${model.net.fine_preprocess.window_size}
    cls_depth: 112
    cls_top_k: 1
    reg_window_size: 3

loss:
  _target_: src.models.components.losses.LoFTRLoss
  coarse_type: "${model.net.coarse_matching.type}"
  fine_type: "${model.net.fine_matching.type}"
  coarse_cls_sparse: ${model.net.coarse_matching.sparse}
  coarse_cls_loss_pos_weight: 1.0
  coarse_cls_loss_neg_weight: 1.0
  fine_cls_sparse: ${model.net.coarse_matching.sparse}
  fine_cls_loss_pos_weight: 1.0
  fine_cls_loss_neg_weight: 1.0
  fine_reg_loss_weight: 1.0
  use_flow: ${model.net.coarse_module.use_flow}
  flow_loss_weight: 0.05

optimizer: ???

scheduler: ???

train_batch_size_per_gpu: ${data.train_batch_size_per_gpu}

canonical_batch_size: ???

canonical_learning_rate: ???

canonical_warmup_step_count: ???

warmup_ratio: ???

end_point_thresholds: ???

epipolar_thresholds: ???

pose_thresholds: ???
